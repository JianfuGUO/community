<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--一个mapper.xml文件对应一个具体的mapper接口-->
<mapper namespace="com.nowcoder.dao.MessageMapper">

    <!--查询复用的字段-->
    <sql id="selectFields">
        id, from_id, to_id, conversation_id, content, status, create_time
    </sql>

    <!--添加复用的字段-->
    <!--相对于查询就缺少一个id字段-->
    <sql id="insertFields">
        from_id, to_id, conversation_id, content, status, create_time
    </sql>

    <!--查询所有私信-->
    <!--查询当前用户的会话列表,针对每个会话只返回一条最新的私信-->
    <select id="selectConversation" resultType="Message">
        select
        <include refid="selectFields"></include>
        from message
        where id in (
        SELECT MAX(id) FROM message
        where `status` != 2
        and from_id !=1
        and ( from_id = #{userId} or to_id = #{userId})
        GROUP BY conversation_id
        )
        order by id desc
        limit #{offset},#{limit}
    </select>

    <!--查询当前用户的会话数量-->
    <!--使用子查询-->
    <select id="selectConversationCount" resultType="int">
        select count(m.maxid) from(
        SELECT MAX(id) as maxid FROM message
        where `status` != 2
        and from_id !=1
        and ( from_id = #{userId} or to_id = #{userId})
        GROUP BY conversation_id
        ) as m
    </select>

    <!--查询某个会话所包含的私信列表-->
    <!--根据 conversation_id 来查询-->
    <select id="selectLetters" resultType="Message">
        select
        <include refid="selectFields"></include>
        from message
        where status != 2
        and from_id != 1
        and conversation_id = #{conversationId}
        order by id desc
        limit #{offset}, #{limit}
    </select>

    <!--查询某个会话所包含的私信数量-->
    <select id="selectLetterCount" resultType="int">
        select count(id)
        from message
        where status != 2
        and from_id != 1
        and conversation_id = #{conversationId}
    </select>

    <!--查询未读私信的数量-->
    <!--别人发给我 toId = userId-->
    <!--if 来动态拼-->
    <select id="selectLetterUnreadCount" resultType="int">
        select count(id)
        from message
        where status = 0
        and from_id != 1
        and to_id = #{userId}
        <if test="conversationId!=null">
            and conversation_id = #{conversationId}
        </if>
    </select>

    <!--添加数据-->
    <!--keyProperty="id"注明自增的主键字段名称为id-->
    <insert id="insertMessage" parameterType="Message" keyProperty="id">
        insert into message(<include refid="insertFields"></include>)
        values(#{fromId},#{toId},#{conversationId},#{content},#{status},#{createTime})
    </insert>

    <!--修改为已读-->
    <!--传进来的ids为集合数据,使用foreach标签来将其转化为 in （xx,xx,xx）的形式-->
    <update id="updateStatus" parameterType="int">
        update message set status = #{status}
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <!--通知列表-->
    <!--查询某个主题下最新的通知-->
    <!--select：表示定义的为查询sql-->
    <!--id:为mapper接口中的方法名-->
    <!--resultType为返回值类型，完整应该是com.nowcoder.entity.Message，但是在配置文件里面已经设置了实体类所在包：com.nowcoder.entity-->
    <!-- <include refid="selectFields"></include>表示复用的字段名 -->
    <select id="selectLatestNotice" resultType="Message">
        <!--查询最新的一条数据-->
        select
        <include refid="selectFields"></include>
        from message
        where id in (
        select max(id) from message
        <!-- status=2表示私信删除的状态 -->
        where status != 2
        <!-- from_id=1表示系统用户，避免与普通用户混淆 -->
        and from_id = 1
        and to_id = #{userId}
        and conversation_id = #{topic}
        )
    </select>

    <!--查询某个主题所包含的通知列表-->
    <select id="selectNoticeCount" resultType="int">
        select count(id) from message
        <!-- status=2表示私信删除的状态 -->
        where status != 2
        <!-- from_id=1表示系统用户，避免与普通用户混淆 -->
        and from_id = 1
        and to_id = #{userId}
        and conversation_id = #{topic}
    </select>

    <!--查询未读的通知的数量-->
    <select id="selectNoticeUnreadCount" resultType="int">
        select count(id) from message
        <!-- status=0表示私信状态为未读 -->
        where status = 0
        <!-- from_id=1表示系统用户，避免与普通用户混淆 -->
        and from_id = 1
        and to_id = #{userId}
        <!-- topic不为null时，再拼条件，表示查询所有主题下的未读通知数量-->
        <!-- 即调用该方法时可以不传入topic值-->
        <if test="topic != null">
            and conversation_id = #{topic}
        </if>
    </select>

    <!--通知详情-->
    <!--查询某个主题所包含的通知列表(支持分页)-->
    <select id="selectNotices" resultType="Message">
        select
        <include refid="selectFields"></include>
        from message
        <!--status=2表示删除状态-->
        where status != 2
        <!--from_id=1表示系统通知-->
        and from_id = 1
        and to_id = #{userId}
        and conversation_id = #{topic}
        order by create_time desc
        <!--分页-->
        limit #{offset},#{limit}
    </select>


</mapper>